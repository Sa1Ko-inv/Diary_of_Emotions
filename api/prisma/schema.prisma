generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URI")
}

//
// === ENUM'ы ===
//
enum AuthMethod {
  CREDENTIALS
  GOOGLE
  YANDEX
}

enum TokenType {
  VERIFICATION
  TWO_FACTOR
  PASSWORD_RESET
}

//
// // Тип уведомления
// enum NotificationCategory {
//   reminder // Напоминание внести запись
//   milestone // Достижение (например, 100 дней streak)
//   encouragement // Поддерживающее сообщение
// }
//
// // Канал уведомления
// enum NotificationType {
//   push
//   email
// }
//
// // Категория совета (пока не используется в интерфейсе)
// enum AdviceCategory {
//   general // Общий
//   emotion // Связанный с эмоцией
//   habit // Связанный с привычкой
//   motivation // Мотивация
// }

//
// === Таблицы ===
//

// Пользователь
model User {
  id       String @id @default(uuid()) // Уникальный ID
  email    String @unique // Email
  password String // Хеш пароля

  displayName String  @map("display_name")
  picture     String?

  isVerified         Boolean @default(false) @map("is_verified") // Подтверждён ли email
  isTwoFactorEnabled Boolean @default(false) @map("is_two_factor_enabled") // Включена ли двухфакторная аутентификация

  method AuthMethod

  accounts Account[]

  createdAt DateTime @default(now()) @map("created_at") // Дата регистрации
  updatedAt DateTime @updatedAt @map("updated_at") // Дата последнего обновления

  entries Entry[] // Эмоциональные записи

  streaks EmotionStreak[] // Эмоциональные стрики

  // cleanStreaks  CleanStreak[] // Счётчики отказа от привычек
  // achievements  UserAchievement[] // Полученные ачивки
  // notifications Notification[] // Уведомления
  @@map("users") // Переименование таблицы в БД
}

// Таблица для хранения информации о различных способах аутентификации пользователей (например, через Google, Yandex и т.д.), она включает в себя тип, провайдера, какой метод аутентификации используется, токен доступа
model Account {
  id String @id @default(uuid())

  type     String
  provider String

  refreshToken String? @map("refresh_token")
  accessToken  String? @map("access_token")
  expiresAt    Int?    @map("expires_at")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?  @map("user_id")

  @@map("accounts")
}

model Token {
  id String @id @default(uuid())

  email String
  token String    @unique
  type  TokenType

  expiresIn DateTime @map("expires_in") // Время истечения токена

  createdAt DateTime @default(now()) @map("created_at")

  @@map("tokens")
}

// Эмоциональная запись
model Entry {
  id          String   @id @default(uuid()) // Уникальный ID записи
  userId      String // Автор записи
  date        DateTime @default(now()) // Дата создания
  description String? // Комментарий к записи

  user     User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  emotions EntryEmotion[] // Эмоции с интенсивностью
  triggers TriggerOnEntry[] // Связанные триггеры

  @@map("entries") // Переименование таблицы в БД
}

// Связь Entry ↔ Emotion (многие к многим, с интенсивностью)
model EntryEmotion {
  id        String @id @default(uuid()) // Уникальный ID
  entryId   String // К какой записи относится
  emotionId String // FK на EmotionType
  intensity Int // От 1 до 10

  entry   Entry       @relation(fields: [entryId], references: [id], onDelete: Cascade)
  emotion EmotionType @relation(fields: [emotionId], references: [id])

  @@map("entry_emotions") // Переименование таблицы в БД
}

// Основная группа эмоций (например, "Грусть", "Страх", "Радость")
model EmotionGroup {
  id    String  @id @default(uuid())
  name  String // Название группы, напр. "Грусть"
  color String? // HEX цвет (опционально для визуализации)

  types         EmotionType[] // Все подтипы в группе
  EmotionStreak EmotionStreak[]

  @@map("emotion_groups") // Переименование таблицы в БД
}

// Подтип эмоции, связанный с группой
model EmotionType {
  id      String @id @default(uuid())
  groupId String
  name    String // Название подтипа, напр. "тоска"

  group      EmotionGroup   @relation(fields: [groupId], references: [id])
  entryLinks EntryEmotion[] // Все связи с записями

  @@map("emotion_types") // Переименование таблицы в БД
}

// Триггер — причина эмоции (например, "работа", "семья")
model Trigger {
  id        String  @id @default(uuid()) // Уникальный ID
  label     String // Название триггера
  createdBy String? // ID автора, если пользовательский

  TriggerOnEntry TriggerOnEntry[] // Связанные записи

  @@map("triggers") // Переименование таблицы в БД
}

// Связь Entry ↔ Trigger (многие ко многим)
model TriggerOnEntry {
  id        String @id @default(uuid()) // Уникальный ID
  entryId   String
  triggerId String

  entry   Entry   @relation(fields: [entryId], references: [id], onDelete: Cascade)
  trigger Trigger @relation(fields: [triggerId], references: [id])

  @@map("entry_triggers") // Переименование таблицы в БД
}

// Стрик по эмоциям
model EmotionStreak {
  id             String   @id @default(uuid())
  userId         String // Пользователь
  emotionGroupId String // Конкретная эмоция (EmotionType)
  count          Int      @default(0) // Количество подряд идущих дней
  lastDate       DateTime // Дата последней записи

  user    User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  emotion EmotionGroup @relation(fields: [emotionGroupId], references: [id])

  @@unique([userId, emotionGroupId]) // уникальный стрик на юзера и эмоцию
  @@map("emotion_streaks")
}

//
// // Ачивка — достижение в системе
// model Achievement {
//   id          String   @id @default(uuid())                   // Уникальный ID
//   code        String   @unique                                // Машинное имя (напр. joy_master)
//   title       String                                          // Название для пользователя
//   description String                                          // Описание ачивки
//   icon        String?                                         // Иконка (если есть)
//
//   users       UserAchievement[]                               // Связанные пользователи
//
//   @@map("achievements") // Переименование таблицы в БД
// }
//
// // Связь пользователь ↔ полученная ачивка
// model UserAchievement {
//   id             String   @id @default(uuid())
//   userId         String
//   achievementId  String
//   achievedAt     DateTime @default(now())                     // Когда получена
//
//   user           User        @relation(fields: [userId], references: [id])
//   achievement    Achievement @relation(fields: [achievementId], references: [id])
//
//   @@map("user_achievements") // Переименование таблицы в БД
// }
//
// // Уведомление (email или push)
// model Notification {
//   id           String              @id @default(uuid())        // Уникальный ID
//   userId       String
//   category     NotificationCategory                            // Тип уведомления
//   type         NotificationType                                // Способ доставки
//   message      String                                           // Текст сообщения
//   sentAt       DateTime?                                       // Когда отправлено (null — в будущем)
//   scheduledAt  DateTime                                        // Когда запланировано
//   meta         Json?                                           // Доп. данные
//
//   user         User                @relation(fields: [userId], references: [id])
//
//   @@map("notifications") // Переименование таблицы в БД
// }
//
// // Счётчик отказа от вредной привычки
// model CleanStreak {
//   id             String     @id @default(uuid())              // Уникальный ID
//   userId         String
//   goal           String                                       // Цель, которую задал пользователь (текст)
//   startedAt      DateTime                                     // Когда начался streak
//   brokenAt       DateTime?                                    // Когда прервался (если прерывался)
//   isActive       Boolean    @default(true)                    // Статус streak'а
//
//   user           User       @relation(fields: [userId], references: [id])
//   motivationalMessages CleanStreakMessage[]                   // Фразы поддержки
//
//   @@map("clean_streaks") // Переименование таблицы в БД
// }
//
// // Мотивационные фразы под streak (меняются под счётчиком)
// model CleanStreakMessage {
//   id             String     @id @default(uuid())
//   streakId       String
//   text           String                                       // Текст мотивационной фразы
//   order          Int?                                         // Очерёдность показа
//
//   streak         CleanStreak @relation(fields: [streakId], references: [id])
//
//   @@map("clean_streak_messages") // Переименование таблицы в БД
// }
//
// // Таблица для хранения советов (не используется в UI, только в схеме)
// model Advice {
//   id          String          @id @default(uuid())             // Уникальный ID
//   text        String                                           // Текст совета
//   category    AdviceCategory                                   // Категория совета
//   emotion     Emotion?                                         // Связанная эмоция (если есть)
//   isVisible   Boolean          @default(true)                  // Видимость (можно скрывать)
//   createdAt   DateTime         @default(now())                 // Дата добавления
//
//   @@map("advice") // Переименование таблицы в БД
// }
